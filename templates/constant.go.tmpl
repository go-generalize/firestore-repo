// THIS FILE IS A GENERATED CODE. DO NOT EDIT
// generated version: {{ .AppVersion }}
package {{ .PackageName }}

import (
	"fmt"
	"time"

	"cloud.google.com/go/firestore"
	"google.golang.org/genproto/googleapis/type/latlng"
)

const DeletedError = "already been deleted"

// OpType - operator type
type OpType = string

const (
	OpTypeEqual              OpType = "=="
	OpTypeLessThan           OpType = "<"
	OpTypeLessThanOrEqual    OpType = "<="
	OpTypeGreaterThan        OpType = ">"
	OpTypeGreaterThanOrEqual OpType = ">="
	OpTypeIn                 OpType = "in"
	OpTypeArrayContains      OpType = "array-contains"
	OpTypeArrayContainsAny   OpType = "array-contains-any"
)

// RequestField - list request field
type RequestField struct {
	Type     string
	Operator OpType
	Value    interface{}
}

// NewRequestField - constructor
func NewRequestField(v interface{}) *RequestField {
	switch x := v.(type) {
	case bool, []bool,
		string, []string,
		int, []int,
		int64, []int64,
		float64, []float64,
		*latlng.LatLng, []*latlng.LatLng,
		*firestore.DocumentRef, []*firestore.DocumentRef,
		map[string]bool,
		map[string]string,
		map[string]int,
		map[string]int64,
		map[string]float64:
		// ok
	case time.Time:
		v = SetLastThreeToZero(x)
	case []time.Time:
		after := make([]time.Time, len(x), len(x))
		for n, t := range x {
			after[n] = SetLastThreeToZero(t)
		}
		v = after
	default:
		panic(fmt.Sprintf("unsupported types: %#v", v))
	}

	return &RequestField{
		Operator: "==",
		Value:    v,
	}
}

// Equal - change operator
func (r *RequestField) Equal() *RequestField {
	r.Operator = OpTypeEqual
	return r
}

// LessThan - change operator
func (r *RequestField) LessThan() *RequestField {
	r.Operator = OpTypeLessThan
	return r
}

// LessThanOrEqual - change operator
func (r *RequestField) LessThanOrEqual() *RequestField {
	r.Operator = OpTypeLessThanOrEqual
	return r
}

// GreaterThan - change operator
func (r *RequestField) GreaterThan() *RequestField {
	r.Operator = OpTypeGreaterThan
	return r
}

// GreaterThanOrEqual - change operator
func (r *RequestField) GreaterThanOrEqual() *RequestField {
	r.Operator = OpTypeGreaterThanOrEqual
	return r
}

// In - change operator
func (r *RequestField) In() *RequestField {
	r.Operator = OpTypeIn
	return r
}

// ArrayContains - change operator
func (r *RequestField) ArrayContains() *RequestField {
	r.Operator = OpTypeArrayContains
	return r
}

// ArrayContainsAny - change operator
func (r *RequestField) ArrayContainsAny() *RequestField {
	r.Operator = OpTypeArrayContainsAny
	return r
}
