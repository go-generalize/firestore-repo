// THIS FILE IS A GENERATED CODE. DO NOT EDIT
// generated version: {{ .AppVersion }}
package {{ .PackageName }}

import (
	"context"
{{- if .MetaFields }}
	"time"
{{- end }}

	"cloud.google.com/go/firestore"
{{- if and (eq .SliceExist true) (eq .EnableIndexes false) }}
	"github.com/go-utils/dedupe"
{{- end }}
{{- if eq .EnableIndexes true }}
	"github.com/knightso/xian"
{{- end }}
	"golang.org/x/xerrors"
	"google.golang.org/api/iterator"
)
{{ $generate := "go:generate" }}
//{{ $generate }} mockgen -source {{ .GeneratedFileName }}.go -destination mock/mock_{{ .GeneratedFileName }}/mock_{{ .GeneratedFileName }}.go

// {{ .RepositoryInterfaceName }} Repository of {{ .StructName }}
type {{ .RepositoryInterfaceName }} interface {
	// Single
	{{ GetFunc }}
	{{ GetWithDocFunc }}
	{{ InsertFunc }}
	{{ UpdateFunc }}
	{{ DeleteFunc }}
	{{ DeleteByFunc }}
	// Multiple
	{{ GetMultiFunc }}
	{{ InsertMultiFunc }}
	{{ UpdateMultiFunc }}
	{{ DeleteMultiFunc }}
	{{ DeleteMultiByFunc }}
	// List
	{{ ListFunc }}
	// misc
	GetCollection() *firestore.CollectionRef
	GetCollectionName() string
	GetDocRef(id string) *firestore.DocumentRef
}
{{ $middlewareName := printf "%sMiddleware" .RepositoryInterfaceName }}
// {{ $middlewareName }} middleware of {{ .RepositoryInterfaceName }}
type {{ $middlewareName }} interface {
	BeforeInsert(ctx context.Context, subject *{{ .StructName }}) (bool, error)
	BeforeUpdate(ctx context.Context, old, subject *{{ .StructName }}) (bool, error)
	BeforeDelete(ctx context.Context, subject *{{ .StructName }}, options ...DeleteOption) (bool, error)
	BeforeDeleteBy{{ .KeyFieldName }}(ctx context.Context, {{ PluralForm .KeyValueName }} []{{ .KeyFieldType }}, options ...DeleteOption) (bool, error)
}

type {{ .RepositoryStructName }} struct {
	collectionName  string
	firestoreClient *firestore.Client{{ if eq .IsSubCollection true }}
	parentDocument  *firestore.DocumentRef{{ end }}
	middleware      []{{ $middlewareName }}
}

// New{{ .RepositoryInterfaceName }} constructor
func New{{ .RepositoryInterfaceName }}(firestoreClient *firestore.Client{{ if eq .IsSubCollection true }}, parentDocument *firestore.DocumentRef{{ end }}, middleware ...{{ $middlewareName }}) {{ .RepositoryInterfaceName }} {
	return &{{ .RepositoryStructName }}{
		collectionName:  "{{ .StructName }}",
		firestoreClient: firestoreClient,{{ if eq .IsSubCollection true }}
		parentDocument:  parentDocument,{{ end }}
		middleware:      middleware,
	}
}
{{ if .MetaFields }}
func (repo *{{ .RepositoryStructName }}) setMeta(subject *{{ .StructName }}, isInsert bool) {
	now := time.Now()

	if isInsert {
		subject.CreatedAt = time.Now()
	}
	subject.UpdatedAt = now
	subject.Version += 1
}
{{ end }}
func (repo *{{ .RepositoryStructName }}) beforeInsert(ctx context.Context, subject *{{ .StructName }}) error {
{{- if .MetaFields }}
	if subject.Version != 0 {
		return xerrors.Errorf("insert data must be Version == 0: %+v", subject)
	}
	if subject.DeletedAt != nil {
		return xerrors.Errorf("insert data must be DeletedAt == nil: %+v", subject)
	}
	repo.setMeta(subject, true)

{{- end }}
	for _, m := range repo.middleware {
		c, err := m.BeforeInsert(ctx, subject)
		if err != nil {
			return xerrors.Errorf("beforeInsert.middleware error: %w", err)
		}
		if !c {
			continue
		}
	}
	return nil
}

func (repo *{{ .RepositoryStructName }}) beforeUpdate(ctx context.Context, old, subject *{{ .StructName }}) error {
{{- if .MetaFields }}
	if old.Version > subject.Version {
		return xerrors.Errorf("The data in the database is newer: (db version: %d, target version: %d) %+v",
			old.Version, subject.Version, subject)
	}
	if subject.DeletedAt != nil {
		return xerrors.Errorf("update data must be DeletedAt == nil: %+v", subject)
	}
	repo.setMeta(subject, false)

{{- end }}
	for _, m := range repo.middleware {
		c, err := m.BeforeUpdate(ctx, old, subject)
		if err != nil {
			return xerrors.Errorf("beforeUpdate.middleware error: %w", err)
		}
		if !c {
			continue
		}
	}
	return nil
}

func (repo *{{ .RepositoryStructName }}) before{{ DeleteFunc }} {
{{- if .MetaFields }}
	repo.setMeta(subject, false)

{{- end }}
	for _, m := range repo.middleware {
		c, err := m.BeforeDelete(ctx, subject, options...)
		if err != nil {
			return xerrors.Errorf("beforeDelete.middleware error: %w", err)
		}
		if !c {
			continue
		}
	}
	return nil
}

// GetCollection *firestore.CollectionRef getter
func (repo *{{ .RepositoryStructName }}) GetCollection() *firestore.CollectionRef {
	return repo.{{ if eq .IsSubCollection true }}parentDocument{{ else }}firestoreClient{{ end }}.Collection(repo.collectionName)
}

// GetCollectionName CollectionName getter
func (repo *{{ .RepositoryStructName }}) GetCollectionName() string {
	return repo.collectionName
}

// GetDocRef *firestore.DocumentRef getter
func (repo *{{ .RepositoryStructName }}) GetDocRef(id string) *firestore.DocumentRef {
	return repo.GetCollection().Doc(id)
}
{{ $MetaName := .OmitMetaName }}
// {{ .StructName }}ListReq List取得時に渡すリクエスト
// └─ bool/int(64)|float64 は stringの独自型で渡す(BoolCriteria | NumericCriteria)
type {{ .StructName }}ListReq struct {
{{- range .FieldInfos }}
{{- if ne $MetaName .Field }}
	{{ .Field }}{{ .Space }} *RequestField
{{- end }}
{{- end }}
{{- if .MetaFields }}
{{- range $key, $value := .MetaFields }}
	{{ $key }}{{ $value.Space }} *RequestField
{{- end }}
	IncludeSoftDeleted{{ .IncludeSoftDeletedSpace }}bool
{{- end  }}
}

// List firestore.Queryを使用し条件抽出をする
//  └─ 第3引数はNOT/OR/IN/RANGEなど、より複雑な条件を適用したいときにつける
//      └─ 基本的にnilを渡せば良い
// BUG(54m) 潜在的なバグがあるかもしれない
func (repo *{{ .RepositoryStructName }}) {{ ListFunc }} {
	var query firestore.Query
	if q == nil {
		ref := repo.GetCollection()
{{ $Meta := .MetaFields }}
{{- range $fi := .FieldInfos }}
{{- if eq $MetaName $fi.Field }}
{{- 	range $key, $value := $Meta }}
		if req.{{ $key }} != nil {
			ref.Query = ref.Query.Where("{{ $key }}", req.{{ $key }}.Operator, req.{{ $key }}.Value)
		}
{{- 	end }}
{{- else }}
{{- 	$IsSlice := HasSlice $fi.FieldType }}
{{- 	$IsMap := HasMap $fi.FieldType }}
		if req.{{ $fi.Field }} != nil {
{{- 		if eq $IsMap true }}
			if items := req.{{ $fi.Field }}.Value.({{ $fi.FieldType }}); len(items) > 0 {
				for key, value := range items {
					ref.Query = ref.Query.Where("{{ $fi.FsTag }}."+key, req.{{ $fi.Field }}.Operator, value)
				}
			}
{{- 		else if eq $IsSlice true }}
			if value := req.{{ $fi.Field }}.Value.({{ $fi.FieldType }}); len(value) > 0 {
				dedupe.Do(&value)
				ref.Query = ref.Query.Where("{{ $fi.FsTag }}", req.{{ $fi.Field }}.Operator, value)
			}
{{- 		else }}
			ref.Query = ref.Query.Where("{{ $fi.FsTag }}", req.{{ $fi.Field }}.Operator, req.{{ $fi.Field }}.Value)
{{- 		end }}
		}
{{- 	end }}
{{- end }}

		query = ref.Query
	} else {
		query = *q
	}
{{- if .MetaFields }}
{{- $metaPath := (index .MetaFields "DeletedAt").ParentPath }}
	if !req.IncludeSoftDeleted {
		query = query.Where("{{ if eq $metaPath "" }}DeletedAt{{ else }}{{ $metaPath }}.DeletedAt{{ end }}", "==", nil)
	}
{{- end }}

	subjects := make([]*{{ .StructName }}, 0)
	iter := query.Documents(ctx)
	for {
		doc, err := iter.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return nil, xerrors.Errorf("error in Next method: %w", err)
		}
		subject := new({{ .StructName }})
		if err := doc.DataTo(&subject); err != nil {
			return nil, xerrors.Errorf("error in DataTo method: %w", err)
		}
		subject.{{ .KeyFieldName }} = doc.Ref.ID
		subjects = append(subjects, subject)
	}

	return subjects, nil
}

// Get 処理中の {{ .StructName }} の取得処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ GetFunc }} {
	doc := repo.GetCollection().Doc({{ .KeyValueName }})
	return repo.GetWithDoc(ctx, doc, options...)
}

// GetWithDoc 処理中の {{ .StructName }} の取得処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ GetWithDocFunc }} {
	snapShot, err := doc.Get(ctx)
	if err != nil {
		return nil, xerrors.Errorf("error in Get method: %w", err)
	}

	subject := new({{ .StructName }})
	if err := snapShot.DataTo(&subject); err != nil {
		return nil, xerrors.Errorf("error in DataTo method: %w", err)
	}
{{ if .MetaFields }}
	if len(options) == 0 || !options[0].IncludeSoftDeleted {
		if subject.DeletedAt != nil {
			return nil, xerrors.New(DeletedError)
		}
	}
{{- end }}
	subject.{{ .KeyFieldName }} = snapShot.Ref.ID

	return subject, nil
}

// Insert 処理中の {{ .StructName }} の登録処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ InsertFunc }} {
{{- if .MetaFields }}
	err := repo.beforeInsert(ctx, subject)
	if err != nil {
		return "", xerrors.Errorf("before insert error: %w", err)
	}

{{- end }}
{{- if .AutomaticGeneration }}
	ref, _, err := repo.GetCollection().Add(ctx, subject)
	if err != nil {
		return "", xerrors.Errorf("error in Add method: %w", err)
	}

	subject.{{ .KeyFieldName }} = ref.ID
{{- else }}
	ref := repo.GetCollection().Doc(subject.{{ .KeyFieldName }})

	if _, err := ref.Get(ctx); err == nil {
		return "", xerrors.Errorf("already exist [%s]", ref.ID)
	}

	if _, err := ref.Set(ctx, subject); err != nil {
		return "", xerrors.Errorf("error in Set method: %w", err)
	}
{{- end }}

	return ref.ID, nil
}

// Update 処理中の {{ .StructName }} の更新処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ UpdateFunc }} {
	ref := repo.GetCollection().Doc(subject.{{ .KeyFieldName }})

	{{ if .MetaFields }}snapShot{{ else }}_{{ end }}, err := ref.Get(ctx)
	if err != nil {
		return xerrors.Errorf("error in Get method: %w", err)
	}
{{- if .MetaFields }}
	old := new({{ .StructName }})
	if err := snapShot.DataTo(&old); err != nil {
		return xerrors.Errorf("error in DataTo method: %w", err)
	}

	err = repo.beforeUpdate(ctx, old, subject)
	if err != nil {
		return xerrors.Errorf("before update error: %w", err)
	}

{{- end }}
	if _, err := ref.Set(ctx, subject); err != nil {
		return xerrors.Errorf("error in Set method: %w", err)
	}

	return nil
}

// Delete 処理中の {{ .StructName }} の削除処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ DeleteFunc }} {
	ref := repo.GetCollection().Doc(subject.{{ .KeyFieldName }})
	snapShot, err := ref.Get(ctx)
	if err != nil {
		return xerrors.Errorf("error in Get method: %w", err)
	}
	old := new({{ .StructName }})
	if err := snapShot.DataTo(old); err != nil {
		return xerrors.Errorf("error in DataTo method: %w", err)
	}

	err = repo.beforeDelete(ctx, subject, options...)
	if err != nil {
		return xerrors.Errorf("before delete error: %w", err)
	}
{{- if .MetaFields }}

	if len(options) > 0 && options[0].Mode == DeleteModeSoft {
		t := time.Now()
		subject.DeletedAt = &t
		if _, err = ref.Set(ctx, subject); err != nil {
			return xerrors.Errorf("error in Set method: %w", err)
		}
	} else {
		if _, err := ref.Delete(ctx); err != nil {
			return xerrors.Errorf("error in Delete method: %w", err)
		}
	}
{{- else }}

	if _, err := ref.Delete(ctx); err != nil {
		return xerrors.Errorf("error in Delete method: %w", err)
	}
{{ end }}
	return nil
}

// DeleteBy{{ .KeyFieldName }} 処理中の {{ .StructName }} の{{ .KeyFieldName }}から削除処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ DeleteByFunc }} {
	if err := repo.Delete(ctx, &{{ .StructName }}{ {{- .KeyFieldName }}: {{ .KeyValueName }}}, options...); err != nil {
		return xerrors.Errorf("error in repo.Delete method: %w", err)
	}
	return nil
}

// GetMulti 処理中の {{ .StructName }} の一括取得処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ GetMultiFunc }} {
	collect := repo.GetCollection()
	docRefs := make([]*firestore.DocumentRef, 0, len({{ PluralForm .KeyValueName }}))
	for _, {{ .KeyValueName }} := range {{ PluralForm .KeyValueName }} {
		ref := collect.Doc({{ .KeyValueName }})
		docRefs = append(docRefs, ref)
	}

	snapShots, err := repo.firestoreClient.GetAll(ctx, docRefs)
	if err != nil {
		return nil, xerrors.Errorf("error in GetAll method: %w", err)
	}

	subjects := make([]*{{ .StructName }}, 0, len({{ PluralForm .KeyValueName }}))
	for _, snapShot := range snapShots {
		subject := new({{ .StructName }})
		if err := snapShot.DataTo(&subject); err != nil {
			return nil, xerrors.Errorf("error in DataTo method: %w", err)
		}
{{ if .MetaFields }}
		if len(options) == 0 || !options[0].IncludeSoftDeleted {
			if subject.DeletedAt != nil {
				continue
			}
		}
{{- end }}
		subject.{{ .KeyFieldName }} = snapShot.Ref.ID
		subjects = append(subjects, subject)
	}

	return subjects, nil
}

// InsertMulti 処理中の {{ .StructName }} の一括挿入処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ InsertMultiFunc }} {
	{{ PluralForm .KeyValueName }} := make([]{{ .KeyFieldType }}, 0, len(subjects))
	batches := make([]*firestore.WriteBatch, 0)
	batch := repo.firestoreClient.Batch()
	collect := repo.GetCollection()

	for i, subject := range subjects {
{{- if .MetaFields }}
		err := repo.beforeInsert(ctx, subject)
		if err != nil {
			return nil, xerrors.Errorf("before insert error: %w", err)
		}

{{- end }}
		var ref *firestore.DocumentRef
		if subject.{{ .KeyFieldName }} == "" {
			ref = collect.NewDoc()
			subject.{{ .KeyFieldName }} = ref.ID
		} else {
			ref = collect.Doc(subject.{{ .KeyFieldName }})
			if s, err := ref.Get(ctx); err == nil {
				return nil, xerrors.Errorf("error in Get method [%s]: %+v", subject.{{ .KeyFieldName }}, s)
			}
		}
		batch.Set(ref, subject)
		{{ PluralForm .KeyValueName }} = append({{ PluralForm .KeyValueName }}, ref.ID)
		i++
		if (i%500) == 0 && len(subjects) != i {
			batches = append(batches, batch)
			batch = repo.firestoreClient.Batch()
		}
	}
	batches = append(batches, batch)

	for _, b := range batches {
		if _, err := b.Commit(ctx); err != nil {
			return nil, xerrors.Errorf("error in Commit method: %w", err)
		}
	}

	return {{ PluralForm .KeyValueName }}, nil
}

// UpdateMulti 処理中の {{ .StructName }} の一括更新処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ UpdateMultiFunc }} {
	batches := make([]*firestore.WriteBatch, 0)
	batch := repo.firestoreClient.Batch()
	collect := repo.GetCollection()

	for i, subject := range subjects {
		ref := collect.Doc(subject.{{ .KeyFieldName }})
		{{ if .MetaFields }}snapShot{{ else }}_{{ end }}, err := ref.Get(ctx)
		if err != nil {
			return xerrors.Errorf("error in Get method [%s]: %w", subject.{{ .KeyFieldName }}, err)
		}

{{- if .MetaFields }}
		old := new({{ .StructName }})
		if err := snapShot.DataTo(&old); err != nil {
			return xerrors.Errorf("error in DataTo method: %w", err)
		}

		err = repo.beforeUpdate(ctx, old, subject)
		if err != nil {
			return xerrors.Errorf("before update error: %w", err)
		}

{{- end }}

		batch.Set(ref, subject)
		i++
		if (i%500) == 0 && len(subjects) != i {
			batches = append(batches, batch)
			batch = repo.firestoreClient.Batch()
		}
	}
	batches = append(batches, batch)

	for _, b := range batches {
		if _, err := b.Commit(ctx); err != nil {
			return xerrors.Errorf("error in Commit method: %w", err)
		}
	}

	return nil
}

// DeleteMulti 処理中の {{ .StructName }} の一括削除処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ DeleteMultiFunc }} {
	batches := make([]*firestore.WriteBatch, 0)
	batch := repo.firestoreClient.Batch()
	collect := repo.GetCollection()

	for i, subject := range subjects {
		ref := collect.Doc(subject.{{ .KeyFieldName }})
		snapShot, err := ref.Get(ctx)
		if err != nil {
			return xerrors.Errorf("error in Get method: %w", err)
		}
		old := new({{ .StructName }})
		if err := snapShot.DataTo(old); err != nil {
			return xerrors.Errorf("error in DataTo method: %w", err)
		}

		err = repo.beforeDelete(ctx, subject, options...)
		if err != nil {
			return xerrors.Errorf("before delete error: %w", err)
		}
{{- if .MetaFields }}

		if len(options) > 0 && options[0].Mode == DeleteModeSoft {
			t := time.Now()
			subject.DeletedAt = &t
			batch.Set(ref, subject)
		} else {
			batch.Delete(ref)
		}
{{- else }}
		batch.Delete(ref)
{{ end }}
		i++
		if (i%500) == 0 && len(subjects) != i {
			batches = append(batches, batch)
			batch = repo.firestoreClient.Batch()
		}
	}
	batches = append(batches, batch)

	for _, b := range batches {
		if _, err := b.Commit(ctx); err != nil {
			return xerrors.Errorf("error in Commit method: %w", err)
		}
	}

	return nil
}

// DeleteMultiBy{{ PluralForm .KeyFieldName }} 処理中の {{ .StructName }} の{{ .KeyFieldName }}群を元に一括削除処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) {{ DeleteMultiByFunc }} {
	subjects := make([]*{{ .StructName }}, 0, len({{ PluralForm .KeyValueName }}))

	for _, {{ .KeyValueName }} := range {{ PluralForm .KeyValueName }} {
		subjects = append(subjects, &{{ .StructName }}{ {{- .KeyFieldName }}: {{ .KeyValueName }}})
	}

	return repo.DeleteMulti(ctx, subjects, options...)
}
